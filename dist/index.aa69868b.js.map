{"mappings":"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","sources":["src/js/main.js"],"sourcesContent":[" // Configuración de Spotify y variables globales\r\n const client_id = \"cf8fa3337fe441acbe39edae87cb906c\";\r\n const client_secret = \"47936664fcd9469f9e5d75d97690194b\";\r\n\r\n // Elementos del DOM\r\n const songInput = document.getElementById(\"song-input\");\r\n const searchButton = document.getElementById(\"search-button\");\r\n const albumCover = document.getElementById(\"album-cover\");\r\n const trackTitle = document.getElementById(\"track-title\");\r\n const trackArtist = document.getElementById(\"track-artist\");\r\n const playPauseButton = document.getElementById(\"playPauseButton\");\r\n const prevButton = document.getElementById(\"prevButton\");\r\n const nextButton = document.getElementById(\"nextButton\");\r\n const audio = document.getElementById(\"audio\");\r\n const progressBar = document.getElementById(\"progress\");\r\n const currentTimeElem = document.getElementById(\"currentTime\");\r\n const durationElem = document.getElementById(\"duration\");\r\n const volumeControl = document.getElementById(\"volumeControl\");\r\n const songInfo = document.getElementById(\"song-info\");\r\n const recommendationsContainer = document.getElementById(\"recommendations\");\r\n\r\n // Variables para recomendaciones y control de reproducción\r\n let recommendations = [];\r\n let currentTrackIndex = 0;\r\n\r\n // Evento para manejar la búsqueda de canciones\r\n searchButton.addEventListener(\"click\", async () => {\r\n     const songName = songInput.value;\r\n     const trackData = await searchSong(songName);\r\n     if (trackData) {\r\n         loadTrackInPlayer(trackData); // Cargar en la barra de reproducción\r\n         playSong(trackData.uri); // Mostrar reproductor embebido\r\n         await displayRecommendations(trackData.uri); // Mostrar recomendaciones\r\n     } else {\r\n         songInfo.innerHTML = \"Canción no encontrada.\";\r\n     }\r\n });\r\n\r\n // Función para obtener un token de acceso\r\n async function getAccessToken() {\r\n     const response = await fetch(\"https://accounts.spotify.com/api/token\", {\r\n         method: \"POST\",\r\n         headers: {\r\n             \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n             Authorization: \"Basic \" + btoa(client_id + \":\" + client_secret),\r\n         },\r\n         body: \"grant_type=client_credentials\",\r\n     });\r\n     const data = await response.json();\r\n     return data.access_token;\r\n }\r\n\r\n // Función para buscar la canción en Spotify\r\n async function searchSong(song) {\r\n     const accessToken = await getAccessToken();\r\n     const response = await fetch(\r\n         `https://api.spotify.com/v1/search?q=${encodeURIComponent(song)}&type=track`,\r\n         {\r\n             method: \"GET\",\r\n             headers: {\r\n                 Authorization: \"Bearer \" + accessToken,\r\n             },\r\n         }\r\n     );\r\n     const data = await response.json();\r\n     if (data.tracks.items.length > 0) {\r\n         return data.tracks.items[0];\r\n     }\r\n     return null;\r\n }\r\n\r\n // Función para cargar una canción en la barra de reproducción personalizada\r\n function loadTrackInPlayer(trackData) {\r\n     albumCover.src = trackData.album.images[0].url;\r\n     trackTitle.textContent = trackData.name;\r\n     trackArtist.textContent = trackData.artists.map(artist => artist.name).join(\", \");\r\n     audio.src = trackData.preview_url;\r\n\r\n     // Reproducir automáticamente la canción al cargar\r\n     audio.play();\r\n     playPauseButton.textContent = \"⏸️\";\r\n\r\n     // Actualizar el tiempo total cuando los metadatos estén cargados\r\n     audio.addEventListener(\"loadedmetadata\", () => {\r\n         const durationMinutes = Math.floor(audio.duration / 60);\r\n         const durationSeconds = Math.floor(audio.duration % 60);\r\n         durationElem.textContent = `${durationMinutes}:${durationSeconds < 10 ? '0' : ''}${durationSeconds}`;\r\n     });\r\n }\r\n\r\n // Función para reproducir la canción en el reproductor embebido\r\n function playSong(uri) {\r\n     const iframe = document.createElement(\"iframe\");\r\n     iframe.src = `https://open.spotify.com/embed/track/${uri.split(\":\")[2]}`;\r\n     iframe.width = \"100%\";\r\n     iframe.height = \"380\";\r\n     iframe.frameBorder = \"0\";\r\n     iframe.allow = \"encrypted-media\";\r\n     songInfo.innerHTML = \"\";\r\n     songInfo.appendChild(iframe);\r\n }\r\n\r\n // Función para mostrar recomendaciones\r\n async function displayRecommendations(songURI) {\r\n     const accessToken = await getAccessToken();\r\n     const trackID = songURI.split(\":\")[2];\r\n     const response = await fetch(\r\n         `https://api.spotify.com/v1/recommendations?seed_tracks=${trackID}`,\r\n         {\r\n             method: \"GET\",\r\n             headers: {\r\n                 Authorization: \"Bearer \" + accessToken,\r\n             },\r\n         }\r\n     );\r\n     const data = await response.json();\r\n     \r\n     recommendationsContainer.innerHTML = \"<h2>Recomendaciones:</h2>\";\r\n     recommendations = data.tracks; // Guardar recomendaciones\r\n     currentTrackIndex = 0; // Resetear el índice al obtener nuevas recomendaciones\r\n     \r\n     data.tracks.forEach((track, index) => {\r\n         const trackContainer = document.createElement(\"div\");\r\n         trackContainer.className = \"recommendation-item\";\r\n         \r\n         const trackInfo = document.createElement(\"p\");\r\n         trackInfo.textContent = `${track.name} - ${track.artists.map(artist => artist.name).join(\", \")}`;\r\n         \r\n         trackContainer.appendChild(trackInfo);\r\n         recommendationsContainer.appendChild(trackContainer);\r\n\r\n         // Evento para reproducir canción en la barra personalizada al hacer clic en una recomendación\r\n         trackContainer.addEventListener(\"click\", () => {\r\n             currentTrackIndex = index; // Actualizar el índice actual\r\n             loadTrackInPlayer(track);\r\n         });\r\n     });\r\n     \r\n     recommendationsContainer.scrollIntoView({ behavior: \"smooth\" });\r\n }\r\n\r\n // Función para reproducir la canción siguiente en las recomendaciones\r\n function playNextTrack() {\r\n     currentTrackIndex = (currentTrackIndex + 1) % recommendations.length;\r\n     loadTrackInPlayer(recommendations[currentTrackIndex]);\r\n }\r\n\r\n // Función para reproducir la canción anterior en las recomendaciones\r\n function playPrevTrack() {\r\n     currentTrackIndex = (currentTrackIndex - 1 + recommendations.length) % recommendations.length;\r\n     loadTrackInPlayer(recommendations[currentTrackIndex]);\r\n }\r\n\r\n // Event Listeners para los botones Siguiente y Anterior\r\n nextButton.addEventListener(\"click\", playNextTrack);\r\n prevButton.addEventListener(\"click\", playPrevTrack);\r\n\r\n // Control de Play/Pause\r\n playPauseButton.addEventListener(\"click\", () => {\r\n     if (audio.paused) {\r\n         audio.play();\r\n         playPauseButton.textContent = \"⏸️\";\r\n     } else {\r\n         audio.pause();\r\n         playPauseButton.textContent = \"▶️\";\r\n     }\r\n });\r\n\r\n // Actualizar la barra de progreso y el tiempo actual\r\n audio.addEventListener(\"timeupdate\", () => {\r\n     const currentMinutes = Math.floor(audio.currentTime / 60);\r\n     const currentSeconds = Math.floor(audio.currentTime % 60);\r\n     currentTimeElem.textContent = `${currentMinutes}:${currentSeconds < 10 ? '0' : ''}${currentSeconds}`;\r\n     const progressPercent = (audio.currentTime / audio.duration) * 100;\r\n     progressBar.style.width = `${progressPercent}%`;\r\n });\r\n\r\n // Control de volumen\r\n volumeControl.addEventListener(\"input\", () => {\r\n     audio.volume = volumeControl.value;\r\n });\r\n\r\n \r\n\r\n// Evento de búsqueda\r\ndocument.getElementById(\"search-button\").addEventListener(\"click\", async () => {\r\n    const songName = document.getElementById(\"song-input\").value;\r\n    const trackData = await searchSong(songName);\r\n    if (trackData) {\r\n        // Actualiza la interfaz con los datos de la canción\r\n        document.getElementById(\"track-title\").textContent = trackData.name;\r\n        document.getElementById(\"track-artist\").textContent = trackData.artists[0].name;\r\n        document.getElementById(\"album-cover\").src = trackData.album.images[0].url;\r\n        document.getElementById(\"audio\").src = trackData.preview_url;\r\n\r\n        // Guarda los datos de la canción en `localStorage`\r\n        const currentTrack = {\r\n            name: trackData.name,\r\n            artist: trackData.artists[0].name,\r\n            previewUrl: trackData.preview_url,\r\n            albumCover: trackData.album.images[0].url\r\n        };\r\n        localStorage.setItem(\"currentTrack\", JSON.stringify(currentTrack));\r\n    } else {\r\n        alert(\"Canción no encontrada\");\r\n    }\r\n});\r\n\r\n// Función para navegar a player.html\r\nfunction navigateToPlayer() {\r\n    location.href = './player.html';\r\n}\r\n"],"names":[],"version":3,"file":"index.aa69868b.js.map","sourceRoot":"/__parcel_source_root/"}